{"version":3,"sources":["Feed.js","AdminTeamListView.js","AdminUserListView.js","AdminCohortListView.js","TeamDetailView.js","SelectCohortView.js","ImageUploadTest.js","UserDetailView.js","App.js","serviceWorker.js","index.js"],"names":["Feed","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","messages","react_default","a","createElement","value","onChange","onTextChange","bind","onClick","onButtonClick","disabled","length","className","map","message","key","id","user","Date","timestamp","toDateString","getMessages","event","preventDefault","setState","target","_this2","fetch","concat","method","then","response","catch","alert","_this3","json","React","Component","AdminTeamListView","teams","team","teamId","react_router_dom","to","teamName","getTeams","match","params","cohortId","AdminUserListView","members","member","email","getMembers","AdminCohortListView","cohortName","cohorts","react","onCohortNameChange","cohort","loadCohorts","TeamDetailView","users","_this$state","projectName","placeholder","onProjectNameChange","projectDescription","onProjectDescChange","githubLink","onGithubLinkChange","userId","src","imgUrl","alt","firstName","lastName","aboutMe","assign","SelectCohortView","selectedCohort","selectedCohortId","onChangeCohortId","console","log","getThisCohortsTeams","ImageUploadTest","action","imageUrl","file","encType","onSubmit","type","name","onFileUpload","files","body","FormData","append","options","mode","error","UserDetailView","currentUser","newUser","handleFormSubmit","_this$state$user","data","notOwner","handleImg","inputType","title","handleFirstName","handleLastName","handleChange","handleAboutMe","Index","About","App","react_router","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.21c1f09a.chunk.js","sourcesContent":["import React from 'react';\n\n/**\n * A component that displays a list of all the messages in our application.\n */\nclass Feed extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // This is a stateful component so we need to define a default representation of our state\n        this.state = {\n            text: '',\n            messages: null\n        };\n    }\n\n    render() {\n        if (this.state.messages == null) {\n            return (<div> loading messages</div>);\n        }\n        return (\n            <div>\n                <div>\n                    <textarea value={this.state.text} onChange={this.onTextChange.bind(this)}></textarea>\n                    <button onClick={this.onButtonClick.bind(this)} disabled={this.state.text.length === ''}> submit </button>\n                </div>\n                <div className=\"message-container\">\n                    {this.state.messages.length === 0 && (<p> There are no posts yet </p>)}\n                    {this.state.messages.map((message) =>\n                        <div key={message.id} className=\"message-div\">\n                            <div className=\"message-header\">\n                                {message.user} - {new Date(message.timestamp).toDateString()}\n                            </div>\n                            <div className=\"message-body\">{message.text}</div>\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n\n    // componentDidMount is a very special function in React. It's part of a group of functions that form part of\n    // the React lifecycle. React calls each one of these functions to notify you the programmer that certain things\n    // have happened or are about to occur.\n    //\n    // Internally React will call componentDidMount after a component's output has been rendered to the DOM.\n    // Its common React practice to make any API calls in componentDidMount().\n    //\n    // Additional documentation about React's lifecycle can be found here:\n    // https://reactjs.org/docs/react-component.html#commonly-used-lifecycle-methods\n    componentDidMount() {\n       this.getMessages();\n    }\n\n    onTextChange(event) {\n        event.preventDefault();\n        this.setState({text: event.target.value});\n    }\n\n    onButtonClick(event) {\n        event.preventDefault();\n        fetch(`/messages?text=${this.state.text}`, {method: 'POST'})\n            .then((response) => this.getMessages())\n            .catch(() => alert('Unable to upload the message. An error occured.'));\n    }\n\n    getMessages() {\n         // Make a call to our API\n        return fetch('/feed')\n            // Coax the response to json\n            .then((response) => response.json())\n            // Set our state using the returned messages. React will now rerender the component.\n            .then((messages) => this.setState({messages}));\n    }\n}\n\nexport default Feed;","import React from 'react';\nimport {Link} from \"react-router-dom\";\n\n/**\n * A component that displays a list of all the messages in our application.\n */\nclass AdminTeamListView extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // This is a stateful component so we need to define a default representation of our state\n        this.state = {\n            text: '',\n            teams: null\n        };\n    }\n\n    render() {\n        if (this.state.teams == null) {\n            return (<div> loading teams</div>);\n        }\n        return (\n            <div>\n                <div>\n                    <textarea value={this.state.text} onChange={this.onTextChange.bind(this)}></textarea>\n                    <button onClick={this.onButtonClick.bind(this)} disabled={this.state.text.length === ''}> Submit </button>\n                </div>\n                <div className=\"team-container\">\n                    {this.state.teams.length === 0 && (<p> There are no teams yet </p>)}\n                    {this.state.teams.map((team) =>\n                        <div key={team.teamId} className=\"team-div\">\n                            <div className=\"team-body\">\n                                <li>\n                                    <Link to={`/admin-team/${team.teamId}`}> {team.teamName} </Link>\n                                </li>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n\n    // componentDidMount is a very special function in React. It's part of a group of functions that form part of\n    // the React lifecycle. React calls each one of these functions to notify you the programmer that certain things\n    // have happened or are about to occur.\n    //\n    // Internally React will call componentDidMount after a component's output has been rendered to the DOM.\n    // Its common React practice to make any API calls in componentDidMount().\n    //\n    // Additional documentation about React's lifecycle can be found here:\n    // https://reactjs.org/docs/react-component.html#commonly-used-lifecycle-methods\n    componentDidMount() {\n       this.getTeams();\n    }\n\n    onTextChange(event) {\n        event.preventDefault();\n        this.setState({text: event.target.value});\n    }\n\n    onButtonClick(event) {\n        event.preventDefault();\n        fetch(`/admin-team-list?cohortId=${this.props.match.params.cohortId}&teamName=${this.state.text}`, {method: 'POST'})\n            .then((response) => this.getTeams()) \n            .catch(() => alert('Unable to upload the team. An error occured.'));\n    }\n\n    getTeams() {\n         // Make a call to our API\n        return fetch(`/admin-team-list?cohortId=${this.props.match.params.cohortId}`)\n            // Coax the response to json\n            .then((response) => response.json())\n            // Set our state using the returned teams. React will now rerender the component.\n            .then((teams) => this.setState({teams}));\n    }\n}\n\nexport default AdminTeamListView;\n","import React from 'react';\n\n/**\n * A component that displays a list of all the messages in our application.\n */\nclass AdminUserListView extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // This is a stateful component so we need to define a default representation of our state\n        this.state = {\n            text: '',\n            members: null\n        };\n    }\n\n    render() {\n        if (this.state.members == null) {\n            return (<div> loading members</div>);\n        }\n        return (\n            <div>\n                <div>\n                    <textarea value={this.state.text} onChange={this.onTextChange.bind(this)}></textarea>\n                    <button onClick={this.onButtonClick.bind(this)} disabled={this.state.text.length === ''}> submit </button>\n                </div>\n                <div className=\"member-container\">\n                    {this.state.members.length === 0 && (<p> There are no members yet </p>)}\n                    {this.state.members.map((member) =>\n                        <div key={member.id} className=\"member-div\">\n                            <div className=\"member-body\">{member.email}</div>\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n\n    // componentDidMount is a very special function in React. It's part of a group of functions that form part of\n    // the React lifecycle. React calls each one of these functions to notify you the programmer that certain things\n    // have happened or are about to occur.\n    //\n    // Internally React will call componentDidMount after a component's output has been rendered to the DOM.\n    // Its common React practice to make any API calls in componentDidMount().\n    //\n    // Additional documentation about React's lifecycle can be found here:\n    // https://reactjs.org/docs/react-component.html#commonly-used-lifecycle-methods\n    componentDidMount() {\n       this.getMembers();\n    }\n\n    onTextChange(event) {\n        event.preventDefault();\n        this.setState({text: event.target.value});\n    }\n\n    onButtonClick(event) {\n        event.preventDefault();\n        fetch(`/create-user?teamId=${this.props.match.params.teamId}&email=${this.state.text}`, {method: 'POST'})\n            .then((response) => this.getMembers()) \n            .catch(() => alert('Unable to upload the member. An error occured.'));\n    }\n\n    getMembers() {\n         // Make a call to our API\n        return fetch(`/admin-user-list?teamId=${this.props.match.params.teamId}`)\n            // Coax the response to json\n            .then((response) => response.json())\n            // Set our state using the returned members. React will now rerender the component.\n            .then((members) => this.setState({members}));\n    }\n}\n\nexport default AdminUserListView;\n","import * as React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nclass AdminCohortListView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            cohortName: '',\n            cohorts: null,\n        };\n    }\n\n    render() {\n        if (this.state.cohorts == null) {\n            return (<div> loading cohorts</div>);\n        }\n        return (\n            <div>\n                <div>\n                    <textarea value={this.state.cohortName} onChange={this.onCohortNameChange.bind(this)}></textarea>\n                    <button onClick={this.onButtonClick.bind(this)} disabled={this.state.cohortName.length === ''}> Submit </button>\n                </div>\n                <div>\n                    {this.state.cohorts.length === 0 && (<p> There are no cohorts yet </p>)}\n                    {this.state.cohorts.map((cohort) =>\n                        <div key={cohort.cohortId}>\n                            <div>\n                                <li>\n                                    <Link to={`/cohort/${cohort.cohortId}`}> {cohort.cohortName} </Link>\n                                </li>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n\n    componentDidMount() {\n        this.loadCohorts();\n    }\n\n    onCohortNameChange(event) {\n        event.preventDefault();\n        this.setState({cohortName: event.target.value});\n    }\n\n    onButtonClick(event) {\n        event.preventDefault();\n        fetch(`/cohort?cohortName=${this.state.cohortName}`, {method: 'POST'})\n            .then((response) => this.loadCohorts());\n    }\n\n    loadCohorts() {\n        fetch('/cohort-list')\n            .then((response) => response.json())\n            .then((cohorts) => this.setState({cohorts}));\n    }\n}\n\nexport default AdminCohortListView;","import React from 'react';\nimport {Link} from \"react-router-dom\";\n\nclass TeamDetailView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            team: null,\n            users: null\n        }\n    };\n\n    render() {\n        let {team,users} = this.state;\n        if(!team) {\n            return (<p> Team is loading... </p>)\n        }\n        return(\n          <div>\n            <h1>\n                {team.teamName}\n            </h1>\n            <form>\n                <input value={team.projectName} placeholder=\"Project Name\" onChange={this.onProjectNameChange.bind(this)}></input>\n                <textarea value={team.projectDescription} placeholder=\"There is no project description yet.\" onChange={this.onProjectDescChange.bind(this)}></textarea>\n                <input value={team.githubLink} placeholder=\"Github Link\" onChange={this.onGithubLinkChange.bind(this)}></input>\n                <button onClick={this.onButtonClick.bind(this)}> Edit Project </button>\n            </form>\n            <ul>\n                {users.map((user) =>\n                    <div key={user.userId}>\n                        <img src={user.imgUrl} alt=\"User\"/>\n                        <Link to={`/user/${user.userId}`}> {user.firstName} {user.lastName} </Link>\n                        <p> {user.aboutMe} </p>\n                    </div>\n                )};\n            </ul>\n          </div>\n        );\n    }\n\n    componentDidMount() {\n        fetch(`/team?teamId={this.props.match.params.teamId}`)\n            .then((response) => response.json())\n            .then((team) => {\n                this.setState({team});\n                fetch(`/admin-user-list?teamId={team.teamId}`)\n                    .then((response) => response.json())\n                    .then((users) => this.setState({users}));\n            });\n    }\n\n    //\n    // Information Changers\n    //\n    onProjectNameChange(event) {\n        event.preventDefault();\n        var team = Object.assign(this.state.team, {projectName: event.target.value});\n        this.setState({team});\n    }\n\n    onProjectDescChange(event) {\n        event.preventDefault();\n        var team = Object.assign(this.state.team, {projectDescription: event.target.value});\n        this.setState({team});\n    }\n\n    onGithubLinkChange(event) {\n        event.preventDefault();\n        var team = Object.assign(this.state.team, {githubLink: event.target.value});\n        this.setState({team});\n    }\n}\n\nexport default TeamDetailView;","import React from 'react';\nimport {Link} from \"react-router-dom\";\n\nclass SelectCohortView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            teams: null,\n            cohorts: null,\n            selectedCohort: '',\n            selectedCohortId: ''\n        }\n    };\n\n    render() {\n        let {teams, cohorts} = this.state;\n        if (cohorts === null) {\n            return <div> Loading cohorts...</div>\n        }\n\n        if (cohorts.length === 0) {\n            return <div> no cohorts to select</div>\n        }\n        return (\n          <div>\n            <select value={this.state.selectedCohort} onChange={this.onChangeCohortId.bind(this)}>\n                { cohorts.map((cohort) =>\n                    <option value={cohort.cohortId}> {cohort.cohortName} </option>\n                )};\n            </select>\n            <div>\n                {teams === null && (<p> There are no teams yet </p>)}\n                {teams != null && teams.map((team) =>\n                    <div key={team.teamId}>\n                        <div>\n                            <li>\n                                <Link to={`/team/${team.teamId}`}> {team.teamName} </Link>\n                            </li>\n                        </div>\n                    </div>\n                )}\n            </div>\n          </div>\n        );\n    }\n\n    componentDidMount() {\n        fetch('/cohort-list')\n            .then((response) => response.json())\n            .then((cohorts) => this.setState({cohorts}));\n    }\n\n    onChangeCohortId(event) {\n        console.log(event.target.value);\n        this.setState({selectedCohortId: event.target.value});\n        this.getThisCohortsTeams(event.target.value);\n    }\n\n    getThisCohortsTeams(teamId) {\n        return fetch(`/admin-team-list?cohortId=${teamId}`)\n            .then((response) => response.json())\n            .then((teams) => this.setState({teams}));\n    }\n}\n\nexport default SelectCohortView","import * as React from \"react\";\n\nclass ImageUploadTest extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            action: '',\n            imageUrl: null,\n            file: null,\n        };\n\n    }\n\n    render() {\n        return (\n            <div>\n                <form action={this.state.action}\n                      method=\"POST\"\n                      encType=\"multipart/form-data\"\n                      onSubmit={this.onSubmit.bind(this)}>\n                    <input type=\"file\" name=\"image\" onChange={this.onFileUpload.bind(this)}></input>\n                    <input type=\"submit\" value=\"Submit\"></input>\n                </form>\n\n                {this.state.imageUrl != null && <img alt=\"user profile\" src={this.state.imageUrl}></img>}\n            </div>\n        );\n    }\n\n    componentDidMount() {\n        // Fetch the url that we are going to submit the image to.\n        fetch('/blobstore-upload-url')\n            .then((response) => response.text())\n            .then((action) => {\n                this.setState({action});\n            });\n    }\n\n    // This method is called whenever the user uploads a file.\n    onFileUpload(event) {\n        this.setState({file: event.target.files[0]});\n    }\n\n    onSubmit(event) {\n        event.preventDefault();\n\n        // Create the contents of the request. Here we add the file to the request.\n        let body = new FormData();\n        body.append(\"image\", this.state.file);\n\n\n        let options = {\n            method: \"POST\",\n            mode: 'cors',\n            body\n        };\n\n        fetch(this.state.action, options)\n            .then((response) => {\n                // Coax the response to text.\n                return response.text();\n            })\n            .then((imageUrl) => {\n                // Update the state with the image URL so that the image will be displayed.\n                this.setState({imageUrl});\n            }).catch((error) => {\n                alert('unable to upload image');\n        });\n    }\n}\n\nexport default ImageUploadTest;","import React from 'react';\n\n/**\n * A component that displays a list of all the messages in our application.\n */\nclass UserDetailView extends React.Component {\n    constructor(props) {\n        super(props);\n\t\n\t    // This is a stateful component so we need to define a default representation of our state\n\t    this.state = {\n\t    \t  user: null,\n\t        action: '',\n\t        currentUser: null,\n\t        file: null\n\t    };\n    }\n\n  /* This lifecycle hook gets executed when the component mounts */\n\n  handleFirstName(event) {\n    event.preventDefault();\n    let newUser = Object.assign({}, this.state.user, {firstName: event.target.value});\n    this.setState({user: newUser});\n  }\n\n  handleLastName(event) {\n    event.preventDefault();\n    let newUser = Object.assign({}, this.state.user, {lastName: event.target.value});\n    this.setState({user: newUser});\n  }\n  \n  handleAboutMe(event) {\n    event.preventDefault();\n    let newUser = Object.assign({}, this.state.user, {aboutMe: event.target.value});\n    this.setState({user: newUser});\n  }\n  \n  onFileUpload(event) {\n        this.setState({file: event.target.files[0]});\n  }\n  \n  handleImg(event) {\n    event.preventDefault();\n    let body = new FormData();\n    body.append(\"image\", this.state.file);\n    \n    let options = {\n            method: \"POST\",\n            mode: 'cors',\n            body\n    };\n    fetch(this.state.action, options)\n        .then((response) => {\n                // Coax the response to text.\n                return response.text();\n            })\n            .then((imgUrl) => {\n                let newUser = Object.assign({}, this.state.user, {imgUrl: event.target.value});\n                this.setState({user: newUser});\n                return this.handleFormSubmit(event);\n            }).catch((error) => {\n                alert('unable to upload image');\n        });\n  }\n\n  handleFormSubmit(event) {\n    event.preventDefault();\n    let {firstName, lastName, imgUrl, aboutMe} = this.state.user;\n    return fetch(`/about?userId=${this.props.match.params.userId}&firstName=${firstName}&lastName=${lastName}&imgUrl=${imgUrl}&aboutMe=${aboutMe}`, {\n      method: \"POST\",\n    }).then(response => {\n      response.json().then(data => {\n        console.log(\"Successful\" + data);\n      });\n    });\n  }\n//<textarea value={this.state.text} onChange={this.onTextChange.bind(this)}></textarea>\n  render() {\n    if (this.state.user == null) {\n            return (<div> loading user</div>);\n        }\n    if (this.state.currentUser == null) {\n            return (<div> checking current user</div>);\n        }\n    let notOwner = this.state.currentUser.id !== this.state.user.id;\n    return (\n      <div>\n        <form action={this.state.action}\n              method=\"POST\"\n              encType=\"multipart/form-data\"\n              onSubmit={this.handleImg.bind(this)}>\n        {this.state.imgUrl != null && <img alt=\"user profile\" src={this.state.imgUrl}></img>}\n        <div>\n        <input type=\"file\" name=\"image\" onChange={this.handleImg.bind(this)} disabled = {this.state.currentUser.id !== this.state.user.id}></input>\n        </div>\n        </form>\n        <form method=\"POST\"\n              encType=\"multipart/form-data\"\n              onSubmit={this.handleFormSubmit.bind(this)}>\n        <fieldset disabled = {this.state.currentUser.id !== this.state.user.id}>\n        <div>\n            <input inputType=\"text\" title=\"First name\" value={this.state.user.firstName} onChange={this.handleFirstName.bind(this)}></input> \n            <input inputType=\"text\" title=\"Last name\" value={this.state.user.lastName} onChange={this.handleLastName.bind(this)}></input>\n            <input inputType=\"text\" title=\"Email\" value={this.state.user.email} disabled = {true}></input>\n        </div>\n        <div>\n          <textarea title=\"About\" value={this.state.user.aboutMe} handleChange={this.handleAboutMe.bind(this)} placeholder=\"Tell us about you\"></textarea> \n        </div>\n        <div>\n          <button type={\"primary\"} title={\"Submit\"} disabled = {notOwner}></button> \n        </div>\n        </fieldset>\n        </form>\n      </div>\n    );\n  }\n  componentDidMount() {\n        // Fetch the url that we are going to submit the image to.\n        fetch(`/login-status`)\n            .then((response) => response.json())\n            .then((currentUser) => {\n                this.setState({currentUser});\n            });\n        fetch(`/blobstore-upload-url`) \n            .then((response) => response.text())\n            .then((action) => {\n                this.setState({action});\n            });\n        fetch(`/about`)\n            .then((response) => response.json())\n            .then((user) => {\n                this.setState({user});\n            });\n  }\n}\nexport default UserDetailView;\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport Feed from './Feed';\nimport AdminTeamListView from './AdminTeamListView';\nimport AdminUserListView from './AdminUserListView';\nimport AdminCohortListView from './AdminCohortListView';\nimport TeamDetailView from \"./TeamDetailView\";\nimport SelectCohortView from \"./SelectCohortView\";\nimport ImageUploadTest from \"./ImageUploadTest\";\nimport UserDetailView from './UserDetailView';\n\n/**\n * The core building block of React is a component. A component can be declared two different ways.\n *\n * The simplest of components are 'stateless components'. As the name implies they do not have any\n * state. They simply take in some inputs and render a view based on that input.\n *\n * This function below is an example of a stateless component.\n *\n * @param props Inputs to this component. Right now we aren't doing anything with it but stayed tuned.\n */\nfunction Index(props) {\n  return (\n      // Why is there HTML in my javascript?\n      //\n      // This is called JSX. Its basically an extension to javascript that makes it easier to write markup in\n      // javascript. This must be converted to regular javascript in order for our code to run in the browser.\n      //\n      // Take a look at the react jsx documentation to learn more: https://reactjs.org/docs/introducing-jsx.html\n      <div>\n          <h1>CodeU Starter Project</h1>\n          <p>This is the CodeU starter project. Click the links above to login and visit your page.\n              You can post messages on your page, and you can visit other user pages if you have\n              their URL.</p>\n          <p>This is your code now! Feel free to make changes, and don't be afraid to get creative!\n              You could start by modifying this page to tell the world more about your team.</p>\n      </div>\n  );\n}\n\nfunction About(props) {\n  return (\n    <div>\n        <h1>About Our Team</h1>\n        <h2>Denise Chacanaca</h2>\n        <ul>\n            <li>Summer Feelz: empowering, happy, and exciting :D </li>\n            <li>Aspirational Hobby: My aspirational hobby is to dance. I love dancing, its a huge part of my culture\n                and community so I would love to get better at it! </li>\n            <li>Ask me About: True crime and Literature </li>\n        </ul>\n        <h2>Teammate B Name: Natalie </h2>\n        <ul>\n            <li>Summer Feelz: relaxing, exciting, free </li>\n            <li>Aspirational Hobby: Cooking</li>\n            <li>Ask me About: Where to get a delicious $5 breakfast in Miami </li>\n        </ul>\n        <h2>Aubree Dix</h2>\n        <ul>\n            <li>Summer Feelz: Sad, adventurous, and relieved!</li>\n            <li>Aspirational Hobby: I would spend all of my time and money learning how to ride a dragon. Yes, I know\n                dragons don't exist, but GOT just ended and I don't know what to do with my emotions right now.\n                (If this *must* be reality, I would learn how to fix up cars.)</li>\n            <li>Ask me About: Maintaining a long-distance relationship.</li>\n        </ul>\n\n    </div>\n  );\n}\n\n/**\n * This component illustrates another way to declare a component. You simply extend `React.Component`.\n * More importantly you need to declare a `render()` function. React will call this under the hood in\n * order to get the view that will be displayed.\n *\n * More complex components will have to use this approach. As things stand this current component is a bit overkill\n * because it doesn't really do much(we could've declared it the same way that we did the above components.\n */\nclass App extends React.Component {\n\n  render() {\n    return (\n        <Router>\n            <div>\n                <nav>\n                    <ul>\n                        <li>\n                            <Link to=\"/\">Home</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/about/\">About Our Team</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/cohort/\">Add Cohort</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/select-cohort/\">Select Cohorts</Link>\n                        </li>\n                    </ul>\n                </nav>\n\n                <Route path=\"/\" exact component={Index} />\n                <Route path=\"/about/\" component={About} />\n                <Route path=\"/feed/\" component={Feed} />\n                <Route path=\"/admin-team/:teamId\" exact component={AdminUserListView} />\n                <Route path=\"/cohort/:cohortId\" exact component={AdminTeamListView} />\n                <Route path=\"/user/:userId\" component={UserDetailView} />\n                <Route path=\"/cohort\" exact component={AdminCohortListView} />\n                <Route path=\"/team/:teamId\" component={TeamDetailView} />\n                <Route path=\"/select-cohort\" component={SelectCohortView} />\n                <Route path=\"/image-upload\" component={ImageUploadTest} />\n            </div>\n        </Router>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}